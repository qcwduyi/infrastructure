
{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Launch EC2 - CSYE 6225 Spring 2020",
    "Parameters": {

        "Rout53Name": {
            "Type": "String"
        },

        "HostedZoneId": {
            "Type": "String"
        },
        "CertificateARN": {
            "Type": "String",
            "Default": ""
        },

        "TestUser": {
            "Type": "String",
            "Default": "cicd"
        },
        "AccountId": {
            "Type": "String",
            "Default": "588539278316"
        },
        "S3CodeDeployBucket":{
            "Description": "The name of S3 bucket where code deploy artifacts are stored",
            "Type": "String",
            "Default": "codedeploy.qingc.me"
        },

        "ImageID": {
            "Type": "String"

        },

        "InstanceType": {
            "Type": "String",
            "Default": "t2.micro"
        },

        "DisableApiTermination": {
            "Type":"String",
            "Default":false
        },

        "RootVolumeSize": {
            "Type": "Number",
            "Default": 20
        },

        "RootVolumeType": {
            "Type": "String",
            "Default": "gp2"
        },

        "RDSInstanceName": {
            "Type": "String",
            "Default": ""
        },

        "AllocatedStorage": {
            "Type": "String",
            "Default": "100"
        },

        "DBUserPsd": {
            "Type": "String",
            "Default": "Jennifer202212"
        },

        "DBUserName": {
            "Type": "String",
            "Default": "dbuser"
        },

        "DBInstanceClass": {
            "Type": "String",
            "Default": "db.t3.micro"
        },

        "MultiAZ": {
            "Type": "String",
            "Default": false
        },

        "PubliclyAccessible": {
            "Type": "String",
            "Default": false
        },

        "DBInstanceIdentifier": {
            "Type": "String",
            "Default": "csye6225-spring2020"
        },

        "DBName": {
            "Type": "String",
            "Default": "csye6225"
        },

        "Engine": {
            "Type": "String",
            "Default": "MySQL"
        },

        "IAMRoleName": {
            "Type": "String",
            "Default": "EC2-CSYE6225"
        },

        "VPCName": {
            "Type": "String",
            "Default": "csye6225VPC"
        },

        "AvailabilityZone": {
            "Type": "String",
            "Default": "us-east-1"
        },

        "VPCCIDRBlock": {
            "Type": "String",
            "Default": "172.16.0.0/16"
        },

        "VPCSubnetCIDR1": {
            "Type": "String",
            "Default": "172.16.1.0/24"
        },

        "VPCSubnetCIDR2": {
            "Type": "String",
            "Default": "172.16.2.0/24"
        },

        "VPCSubnetCIDR3": {
            "Type": "String",
            "Default": "172.16.3.0/24"
        },

        "DestinationCIRDBlock": {
            "Type": "String",
            "Default": "0.0.0.0/0"
        }
    },

    "Resources": {
        "DemoVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {"Ref": "VPCCIDRBlock"},
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "InstanceTenancy": "default",
                "Tags": [
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "VPCName"}, "VPC"]]}}
                ]

            }
        },

        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "DemoVPC"},
                "CidrBlock": {"Ref": "VPCSubnetCIDR1"},
                "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": {"Ref": "AvailabilityZone"}}]},
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {"Key": "Network", "Value": "Public"},
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "VPCName"}, "PublicSubnet-1"]]}}
                ]

            }

        },

        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "DemoVPC"},
                "CidrBlock": {"Ref": "VPCSubnetCIDR2"},
                "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": {"Ref": "AvailabilityZone"}}]},
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {"Key": "Network", "Value": "Public"},
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "VPCName"}, "PublicSubnet-2"]]}}
                ]

            }

        },

        "PublicSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "DemoVPC"},
                "CidrBlock": {"Ref": "VPCSubnetCIDR3"},
                "AvailabilityZone": {"Fn::Select": ["2", {"Fn::GetAZs": {"Ref": "AvailabilityZone"}}]},
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {"Key": "Network", "Value": "Public"},
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "VPCName"}, "PublicSubnet-3"]]}}
                ]

            }

        },

        "DemoInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "VPCName"}, "InternetGateway"]]}},
                    {"Key": "Network", "Value": "Public"}
                ]
            }
        },

        "AttachedGateway": {
            "DependsOn": ["DemoVPC", "DemoInternetGateway"],
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {"Ref": "DemoVPC"},
                "InternetGatewayId": {"Ref": "DemoInternetGateway"}
            }
        },

        "PublicRouteTable": {
            "DependsOn": ["DemoVPC"],
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "DemoVPC"},
                "Tags": [
                    {"Key": "Network", "Value": "Public"},
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "VPCName"}, "RouteTable"]]}}
                ]
            }
        },

        "publicSubnetRouteTableAssociation1": {
            "DependsOn": ["PublicSubnet1", "PublicRouteTable"],
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PublicSubnet1"},
                "RouteTableId": {"Ref": "PublicRouteTable"}
            }
        },

        "publicSubnetRouteTableAssociation2": {
            "DependsOn": ["PublicSubnet2", "PublicRouteTable"],
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PublicSubnet2"},
                "RouteTableId": {"Ref": "PublicRouteTable"}
            }
        },

        "publicSubnetRouteTableAssociation3": {
            "DependsOn": ["PublicSubnet3", "PublicRouteTable"],
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PublicSubnet3"},
                "RouteTableId": {"Ref": "PublicRouteTable"}
            }
        },

        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachedGateway",
            "Properties": {
                "RouteTableId": {"Ref": "PublicRouteTable"},
                "DestinationCidrBlock": {"Ref": "DestinationCIRDBlock"},
                "GatewayId": {"Ref": "DemoInternetGateway"}
            }
        },

        "RDSInstance": {
            "Type": "AWS::RDS::DBInstance",
            "DependsOn":["PublicSubnet1","PublicSubnet2","PublicSubnet3"],
            "Properties" : {
                "AllocatedStorage": {"Ref": "AllocatedStorage"},
                "DBInstanceClass": {"Ref": "DBInstanceClass"},
                "DBInstanceIdentifier": {"Ref": "DBInstanceIdentifier"},
                "DBName": {"Ref": "DBName"},
                "Engine": {"Ref": "Engine"},
                "MasterUserPassword": {"Ref": "DBUserPsd"},
                "MasterUsername": {"Ref": "DBUserName"},
                "MultiAZ": {"Ref": "MultiAZ"},
                "PubliclyAccessible": {"Ref": "PubliclyAccessible"},
                "DBSubnetGroupName": {"Ref":"DBSubnetGrp"},
                "StorageEncrypted": true,
                "VPCSecurityGroups": [
                    {"Ref": "SecurityGroupForDB"}
                ],
                "Tags": [
                    {"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "RDSInstanceName"}, "RDS"]]}}
                ]
            }
        },

        "DBSubnetGrp":{
            "Type" : "AWS::RDS::DBSubnetGroup",
            "DependsOn":["PublicSubnet1","PublicSubnet2","PublicSubnet3"],
            "Properties" : {
                "DBSubnetGroupDescription" : "DBSubnetGroup",
                "DBSubnetGroupName" : "DBSubnetGroup",
                "SubnetIds" : [ {"Ref":"PublicSubnet1"},{"Ref":"PublicSubnet2"},{"Ref":"PublicSubnet3"} ],
                "Tags" : [ {"Key":"Name","Value":"DBSubnetGroup1"} ]
            }
        },

        "SecurityGroupForApp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroupForApplication",
                "GroupName" : "ApplicationSecurity",
                "VpcId": {"Ref": "DemoVPC"},
                "SecurityGroupIngress": [
                    {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "CidrIp": "0.0.0.0/0"}

                ]
            }
        },

        "SecurityGroupForDB": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": ["SecurityGroupForApp"],
            "Properties": {
                "GroupDescription": "SecurityGroupForDatabase",
                "GroupName" : "DBSecurity",
                "VpcId": {"Ref": "DemoVPC"},
                "SecurityGroupIngress": [
                    {"IpProtocol" : "tcp", "FromPort" : 3306, "ToPort" : 3306, "CidrIp": "0.0.0.0/0"}
                ]
            }
        },

        "S3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "AccessControl" : "Private",
                "BucketEncryption" :{
                    "ServerSideEncryptionConfiguration" : [ {
                        "ServerSideEncryptionByDefault" :{"SSEAlgorithm": "AES256"}
                    }]
                }

            }
        },

        "EC2CSYE6225Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {"Ref": "IAMRoleName"},
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ec2.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/"
            }
        },



        "WebAppS3Policy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "WebAppS3",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:*"
                        ],
                        "Resource": [
                            {"Fn::Join": ["",["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
                        ]
                    }]
                },
                "Users" : [ { "Ref" : "TestUser" } ]
            }
        },

        "EC2Policy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "EC2Policy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AttachVolume",
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:CopyImage",
                                "ec2:CreateImage",
                                "ec2:CreateKeypair",
                                "ec2:CreateSecurityGroup",
                                "ec2:CreateSnapshot",
                                "ec2:CreateTags",
                                "ec2:CreateVolume",
                                "ec2:DeleteKeyPair",
                                "ec2:DeleteSecurityGroup",
                                "ec2:DeleteSnapshot",
                                "ec2:DeleteVolume",
                                "ec2:DeregisterImage",
                                "ec2:DescribeImageAttribute",
                                "ec2:DescribeImages",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "ec2:DescribeRegions",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeSnapshots",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeTags",
                                "ec2:DescribeVolumes",
                                "ec2:DetachVolume",
                                "ec2:GetPasswordData",
                                "ec2:ModifyImageAttribute",
                                "ec2:ModifyInstanceAttribute",
                                "ec2:ModifySnapshotAttribute",
                                "ec2:RegisterImage",
                                "ec2:RunInstances",
                                "ec2:StopInstances",
                                "ec2:TerminateInstances"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Users" : [ { "Ref" : "TestUser" } ]
            }
        },


        "CodeDeployEC2S3" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "ManagedPolicyName": "CodeDeploy-EC2-S3",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Effect": "Allow",
                            "Resource":[
                                {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }] ]},
                                {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }, "/*"] ]}
                            ]
                        }
                    ]
                },
                "Users" : [ { "Ref" : "TestUser" } ]
            }
        },
        "CircleCIUploadToS3" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "ManagedPolicyName": "CircleCI-Upload-To-S3",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "S3:List*",
                                "s3:Get*",
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Resource":[
                                {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }] ]},
                                {"Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3CodeDeployBucket" }, "/*"] ]}
                            ]
                        }
                    ]
                },
                "Users" : [ { "Ref" : "TestUser" } ]
            }
        },

        "CircleCICodeDeploy" : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Properties" : {
                "ManagedPolicyName": "CircleCI-Code-Deploy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:RegisterApplicationRevision",
                                "codedeploy:GetApplicationRevision"
                            ],
                            "Resource": [
                                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AvailabilityZone" }, ":", { "Ref" : "AccountId" }, ":application:csye6225-webapp" ] ]}
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetDeployment"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:GetDeploymentConfig"
                            ],
                            "Resource": [
                                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AvailabilityZone" }, ":", { "Ref" : "AccountId" }, ":deploymentconfig:CodeDeployDefault.OneAtATime"] ]},
                                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AvailabilityZone" }, ":", { "Ref" : "AccountId" }, ":deploymentconfig:CodeDeployDefault.HalfAtATime"] ]},
                                {"Fn::Join" : [ "", [ "arn:aws:codedeploy:", { "Ref" : "AvailabilityZone" }, ":", { "Ref" : "AccountId" }, ":deploymentconfig:CodeDeployDefault.AllAtOnce"] ]}
                            ]
                        }
                    ]
                },
                "Users" : [ { "Ref" : "TestUser" } ]
            }
        },



        "CodeDeployServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "codedeploy.us-east-1.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "ManagedPolicyArns":[
                    "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                ],
                "Path": "/",
                "RoleName": "CodeDeployServiceRole"
            }
        },

        "CodeDeployEC2ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "ManagedPolicyArns":[
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                    {"Ref" : "CodeDeployEC2S3"},
                    "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
                    "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
                    "arn:aws:iam::aws:policy/AmazonSESFullAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess"
                ],
                "Path": "/",
                "RoleName": "CodeDeployEC2ServiceRole"
            }
        },

        "CodeDeployEC2ServiceInstanceProfile": {
            "DependsOn" : ["CodeDeployEC2ServiceRole"],
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ "CodeDeployEC2ServiceRole"
                ]
            }
        },


        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName" : "csye6225-webapp",
                "ComputePlatform": "Server"
            }
        },


        "DeploymentGroup" : {
            "DependsOn" : ["CodeDeployServiceRole","AutoScalingGroup"],
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "ApplicationName" : "csye6225-webapp",
                "DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
                "DeploymentGroupName": "csye6225-webapp-deployment",
                "AutoScalingGroups": ["AutoScalingGroup"],
                "DeploymentStyle":{
                    "DeploymentOption" : "WITHOUT_TRAFFIC_CONTROL",
                    "DeploymentType" : "IN_PLACE"
                },
                "LoadBalancerInfo": {
                    "TargetGroupInfoList": [
                        {
                            "Name": "ALBTargetGroup"
                        }
                    ]
                },
                "AutoRollbackConfiguration": {
                    "Enabled": "true",
                    "Events": [ "DEPLOYMENT_FAILURE" ]
                },
                "Ec2TagFilters" : [{
                    "Key" : "Name",
                    "Value" :"CodedeployDemo",
                    "Type" : "KEY_AND_VALUE"
                }],
                "ServiceRoleArn" : {
                    "Fn::GetAtt" : [
                        "CodeDeployServiceRole",
                        "Arn"
                    ]
                }
            }
        },

        "LaunchConfiguration" :{
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Properties":{
                "ImageId" :{"Ref" : "ImageID"},
                "KeyName": "awsKey",
                "InstanceType":"t2.micro",
                "IamInstanceProfile" : {"Ref" : "CodeDeployEC2ServiceInstanceProfile"},
                "AssociatePublicIpAddress":true,
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": {"Ref":"RootVolumeSize"},
                            "VolumeType": {"Ref":"RootVolumeType"},
                            "DeleteOnTermination": true
                        }
                    }],
                "SecurityGroups":[
                    {
                        "Ref":"WebAppSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["\n",
                            [
                                "#!/bin/bash -xe ",
                                {
                                    "Fn::Join":[" ",["echo",{"Fn::Join":["",["S3_BUCKET_NAME=","\"",  { "Ref": "S3Bucket" },"\""]]},
                                        ">>","/etc/environment"]]
                                },
                                {
                                    "Fn::Join":[" ",["echo",{"Fn::Join":["",["dbusername=","\"",{ "Ref": "DBUserName" },"\""]]},
                                        ">>","/etc/environment"]]},
                                {
                                    "Fn::Join":[" ",["echo",{"Fn::Join":["",["dbuserPassword=","\"",{ "Ref": "DBUserPsd"},"\""]]},
                                        ">>","/etc/environment"]]
                                },
                                {
                                    "Fn::Join":[" ",["echo",{"Fn::Join":["",["hostname=","\"",{ "Fn::GetAtt": [ "RDSInstance", "Endpoint.Address" ] },"\""]]},
                                        ">>","/etc/environment"]]
                                },
                                {
                                    "Fn::Join":[" ",["echo",{"Fn::Join":["",["dbname=","\"", { "Ref": "DBName" },"\""]]},
                                        ">>","/etc/environment"]]
                                },

                                {
                                    "Fn::Join":[" ",["echo",{"Fn::Join":["",["Region=","\"",  { "Ref": "AvailabilityZone" },"\""]]},
                                        ">>","/etc/environment"]]
                                }

                            ]
                        ]
                    }
                },
                "LaunchConfigurationName" : "asg_launch_config"
            }

        },
        "WebAppSecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "DependsOn":"LoadbalancerSecurityGroup",
            "Properties":{
                "GroupDescription":"Security Group for Web Server",
                "VpcId" : {"Ref": "DemoVPC"},

                "SecurityGroupIngress": [
                    {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "SourceSecurityGroupId" : {"Ref":"LoadbalancerSecurityGroup"}}

                ]
            }

        },


        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 10% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "10",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroup",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 5% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "5",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroup",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "AutoScalingGroup":{
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AutoScalingGroupName" : "AutoScalingGroup",
                "VPCZoneIdentifier": [{"Ref": "PublicSubnet1"}],
                "LaunchConfigurationName" : {"Ref": "LaunchConfiguration"},
                "Cooldown" : 60,
                "MaxSize" : "4",
                "MinSize" : "2",
                "DesiredCapacity" : "2",
                "TargetGroupARNs" : [{"Ref": "ALBTargetGroup"}],
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CodedeployDemo",
                        "PropagateAtLaunch":true
                    }
                ]

            }
        },

        "ALBTargetGroup" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Name": "ALBTargetGroup",
                "HealthCheckIntervalSeconds": 5,
                "HealthCheckTimeoutSeconds": 2,
                "HealthyThresholdCount": 2,
                "Port": 8080,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {"Ref": "DemoVPC"}
            }
        },
        "ALBLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" :
            {
                "IpAddressType" : "ipv4",
                "Subnets": [ {"Ref": "PublicSubnet1"}, {"Ref": "PublicSubnet2"}],
                "SecurityGroups" : [ {"Ref":"LoadbalancerSecurityGroup"} ],
                "Name" : "ALBLoadBalancer",
                "Scheme" : "internet-facing",
                "Tags" : [  {
                    "Key": "Name",
                    "Value": "csye6225-LoadBalancer"
                } ],
                "Type" : "application"
            }

        },

        "LoadbalancerSecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Security Group for Load Balancers",
                "VpcId" : {"Ref": "DemoVPC"},
                "SecurityGroupIngress":[
                    {"IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp": "0.0.0.0/0"}
                ] ,

                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"csye6225LoadBalancerGroup"
                    }
                ]
            }
        },


        "ALBListenerForHttps" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn":["ALBTargetGroup","ALBLoadBalancer"],
            "Properties" : {
                "Certificates": [
                    {
                        "CertificateArn": "arn:aws:acm:us-east-1:352551683185:certificate/69db99e0-b77f-4581-8696-512a6fa9c86d"
                    }
                ],
                "DefaultActions" : [{
                    "Type" : "forward",
                    "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
                }],
                "LoadBalancerArn" : { "Ref" : "ALBLoadBalancer" },
                "Port" : 443,
                "Protocol" : "HTTPS"

            }
        },

        "Route53RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "DependsOn": "ALBLoadBalancer",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {"Fn::GetAtt": ["ALBLoadBalancer", "DNSName"]},
                    "HostedZoneId": {"Fn::GetAtt": ["ALBLoadBalancer", "CanonicalHostedZoneID"]},
                    "EvaluateTargetHealth": true
                },
                "Name": {
                    "Ref" : "Rout53Name"
                },
                "HostedZoneId": {
                    "Ref" : "HostedZoneId"
                },
                "Type": "A"
            }
        }


    }
}

